----------------------------------------------------------------------------------
-- Compare the tags generated by the proc node with the tags calculated 
-- in every node 
-- The packet is droped when they are different, which means all out packets
-- are all zeros 
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity checksum is
    Port ( clk : in  STD_LOGIC;
           reset : in  STD_LOGIC;
           north_in : in  STD_LOGIC_VECTOR (48 downto 0);
           east_in : in  STD_LOGIC_VECTOR (48 downto 0);
           south_in : in  STD_LOGIC_VECTOR (48 downto 0);
           west_in : in  STD_LOGIC_VECTOR (48 downto 0);
           north_out : out  STD_LOGIC_VECTOR (48 downto 0);
           east_out : out  STD_LOGIC_VECTOR (48 downto 0);
           south_out : out  STD_LOGIC_VECTOR (48 downto 0);
           west_out : out  STD_LOGIC_VECTOR (48 downto 0);
		   pkt_drop : out STD_LOGIC;
           local_tag : in  STD_LOGIC_VECTOR(7 DOWNTO 0);
           tag_seg : in  STD_LOGIC_VECTOR(7 DOWNTO 0)
	);
end checksum;

architecture Behavioral of checksum is
	signal pkt_has_data : std_logic_vector(3 downto 0);
begin
	process(clk, reset)
	begin
		if reset = '1' then
			north_out <= (others => '0');
			east_out <= (others => '0');
			south_out <= (others => '0');
			west_out <= (others => '0');
			pkt_drop <= '0';
		elsif rising_edge(clk) then
			-- Check the flags to detemine wheathe the packets have data
			if north_in(42 downto 40) /= "000" then
				pkt_has_data(3) <= '1'; 
			elsif east_in(42 downto 40) /= "000" then
				pkt_has_data(2) <= '1';
			elsif south_in(42 downto 40) /= "000" then
				pkt_has_data(1) <= '1';
			elsif west_in(42 downto 40) /= "000" then
				pkt_has_data(0) <= '1';
			else 
				pkt_has_data <= "0000";
			end if;
			
			if local_tag = tag_seg then
				north_out <= north_in;
				east_out <= east_in;
				south_out <= south_in;
				west_out <= west_in;
				pkt_drop <= '0';
			else
				if pkt_has_data = "0000" then
					pkt_drop <= '0';
				else 
					pkt_drop <= '1';
				end if;
				north_out <= (others => '0');
				east_out <= (others => '0');
				south_out <= (others => '0');
				west_out <= (others => '0');
			end if;
		end if;
	end process;


end Behavioral;

